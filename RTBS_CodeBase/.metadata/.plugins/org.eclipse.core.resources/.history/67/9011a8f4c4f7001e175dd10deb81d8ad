package com.rtbs.userservice.configurations;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.authentication.configuration.GlobalAuthenticationConfigurerAdapter;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.context.DelegatingSecurityContextRepository;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.security.web.context.RequestAttributeSecurityContextRepository;
import org.springframework.security.web.context.SecurityContextHolderFilter;


import com.rtbs.userservice.models.CustomFilter;
import com.rtbs.userservice.models.CustomSuccessHandler;
import com.rtbs.userservice.models.MyUserDetailService;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration   {
	
	@Autowired
	private MyUserDetailService myUserDetailService;
	
	
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception
	{
		CustomFilter mupaf = new CustomFilter();
		mupaf.setAuthenticationManager(authenticationProvider());
		mupaf.setAuthenticationSuccessHandler(new CustomSuccessHandler());
		mupaf.setAllowSessionCreation(true);
		
		
        
		return httpSecurity
				.csrf(AbstractHttpConfigurer::disable)
				.addFilterAt( mupaf, UsernamePasswordAuthenticationFilter.class)
				.authorizeHttpRequests(registry->{
//					registry.requestMatchers( "/protected-resource").authenticated();
					registry.requestMatchers("/bookingRequest", "/cancelTicket").authenticated();
					registry.requestMatchers("/register", "/public-resource", "/", "/logout" ).permitAll();
					
				})
				
//				.securityContext((securityContext) -> securityContext
//						.securityContextRepository(new DelegatingSecurityContextRepository(
//							new RequestAttributeSecurityContextRepository(),
//							new HttpSessionSecurityContextRepository()
//						))
//						)
//				.securityContext(Customizer.withDefaults())
				
//				.formLogin(formLogin-> formLogin.permitAll())
				
				.build();
	}
	
//	@Bean
//	public UserDetailsService userDetailsService()
//	{
//		UserDetails normalUser = User.builder()
//				.username("aakash")
//				.password("$2a$12$6eiBdveIWZ6F2CP30R7acePpIPpBG0rj7dm04ZoHrTwHxhzTQtZ9C") //aakash
//				.roles("USER")
//				.build();
//		
//		return new InMemoryUserDetailsManager(normalUser);
//	}
	
	
	@Bean
	public UserDetailsService userDetailsService()
	{
		return myUserDetailService;
	}
	
	@Bean
	public AuthenticationManager authenticationProvider()
	{
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(userDetailsService());
		provider.setPasswordEncoder(passwordEncoder());
		return new ProviderManager(provider);
	}
	
	
	@Bean
	public PasswordEncoder passwordEncoder()
	{
		return new BCryptPasswordEncoder();
	}

}
